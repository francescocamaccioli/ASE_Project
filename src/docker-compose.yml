services:



  # Gateway Service
  gateway:
    build: ./gateway
    ports:
      - "5001:5000"
    depends_on:
      - gatcha
      #- user  # Commentato perché non necessario per Gacha
      #- market  # Commentato perché non necessario per Gacha
      - db-manager
    secrets:
      - gateway_cert
      - gateway_cert_key



  # Gatcha service
  gatcha:
    build: ./gatcha
    depends_on:
      - db-manager  # Il servizio Gatcha dipende dal db-manager
    secrets:
      - gatcha_cert
      - gatcha_cert_key



  # User service (non necessario per il funzionamento del Gacha)
  # user:
  #   build: ./user
  #   depends_on:
  #     - db-manager



  # Market service (non necessario per il funzionamento del Gacha)
  # market:
  #   build: ./market
  #   depends_on:
  #     - db-manager



  # DB Manager (Container to interact with MongoDB)
  db-manager:
    build: ./dbm
    depends_on:
      - db-gatcha  # Solo il database di Gatcha è necessario
    secrets:
      - db-manager_cert
      - db-manager_cert_key




  # MongoDB for gatcha (Database for gatcha service)
  db-gatcha:
    image: mongo:latest
    ports:
      - "27017:27017"  # Host to container mapping
    volumes:
      - dbdata-gatcha:/data/db
      - ./mongo/seed-data:/docker-entrypoint-initdb.d  # mongo, all'avvio, eseguirà automaticamente il file .js per popolare con i dati iniziali. see: https://stackoverflow.com/questions/42912755/how-to-create-a-db-for-mongodb-container-on-start-up/42917632#42917632
    environment:
      MONGO_INITDB_DATABASE: gatcha_db  # Name of the DB


    command: mongod --quiet
    # TODO: far funzionare con TLS, c'è una slide con un esempio di come far, ma non funziona
    # --tlsAllowConnectionsWithoutCertificates --tlsMode preferTLS --tlsCertificateKeyFile /run/secrets/db-gatcha_cert_key --tlsCAFile /run/secrets/db-manager_cert
    secrets:
      - db-gatcha_cert
      - db-gatcha_cert_key





  # MongoDB for user (non necessario per Gacha)
  # db-user:
  #   image: mongo:latest
  #   ports:
  #     - "27018:27017"  # Host to container mapping
  #   volumes:
  #     - dbdata-user:/data/db
  #   environment:
  #     MONGO_INITDB_DATABASE: user_db  # Name of the DB
  #   command: mongod --quiet --logpath /dev/null  # Avvia MongoDB con log minimizzati
  # TODO: certificato con segreto, come per gli altri servizi




  # MongoDB for market (non necessario per Gacha)
  # db-market:
  #   image: mongo:latest
  #   ports:
  #     - "27019:27017"  # Host to container mapping
  #   volumes:
  #     - dbdata-market:/data/db
  #   environment:
  #     MONGO_INITDB_DATABASE: market_db  # Name of the DB
  #   command: mongod --quiet --logpath /dev/null  # Avvia MongoDB con log minimizzati
  # TODO: certificato con segreto, come per gli altri servizi





volumes:
  dbdata-gatcha:
  # dbdata-user:  # Commentato perché non necessario per Gacha
  # dbdata-market:  # Commentato perché non necessario per Gacha




# segreti: semplicemente, prende i file dalla cartella del progetto, e li monta dentro la cartella /run/secrets/ del container
secrets:
  gateway_cert:
    file: ./gateway/localhost_cert.pem
  gateway_cert_key:
    file: ./gateway/localhost_key.pem

  gatcha_cert:
    file: ./gatcha/localhost_cert.pem
  gatcha_cert_key:
    file: ./gatcha/localhost_key.pem

  db-manager_cert:
    file: ./dbm/localhost_cert.pem
  db-manager_cert_key:
    file: ./dbm/localhost_key.pem

  db-gatcha_cert:
    file: ./mongo/localhost_cert.pem
  db-gatcha_cert_key:
    file: ./mongo/localhost_key.pem

  




