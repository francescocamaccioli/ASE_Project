# Definisce un campo di estensione
# serve per evitare di ripetere le stesse variabili in più servizi, senza dover fare copia-incolla
x-common-environment:
  &common-env
  GATCHA_URL: https://gatcha:5000
  USER_URL: https://user:5000
  MARKET_URL: https://market:5000
  AUTH_URL: https://auth:5000

services:

  # Next.js Service
  nextjs:
    build: ./nextjs
    ports:
      - "3000:3000"
    depends_on:
      - gateway
    environment:
      GATEWAY_URL: https://localhost:5001

  # Gateway Service
  gateway:
    build: ./gateway
    ports:
      - "5001:5000"
    depends_on:
      - gatcha
      - user
      - market
      - auth
    environment:
      <<: *common-env
      MINIO_STORAGE_URL: http://minio-storage:9000
    secrets:
      - gateway_cert
      - gateway_key

  # Gateway Service RESERVED FOR ADMINS, with access to privileged endpoints
  admin-gateway:
    build: ./admin-gateway
    ports:
      - "5002:5000"
    depends_on:
      - gatcha
      - user
      - market
      - auth
    environment:
      <<: *common-env
    secrets:
      - admin_gateway_cert
      - admin_gateway_key

  auth:
    build: ./auth
    depends_on:
      - auth-db
      - redis
    environment:
      <<: *common-env
      AUTH_DB_URL: auth-db:27017
      AUTH_DB_NAME: auth_db
    secrets:
      - auth_cert
      - auth_key
      - JWT_SECRET

  auth-db:
    image: mongo:latest
    # ports:
    #   - "27016:27017"  # è esposta solo per debugging, da commentare in produzione.
    volumes:
      - dbdata-auth:/data/db
    environment:
      MONGO_INITDB_DATABASE: auth_db  # Nome del database per l'autenticazione
    command: mongod --quiet --logpath /dev/null  # Avvia MongoDB con log minimizzati

  # Gatcha service
  gatcha:
    build: ./gatcha
    depends_on:
      - db-gatcha
      - minio-storage
      - user
    environment:
      <<: *common-env
      MINIO_STORAGE_URL: minio-storage:9000 # non mettere http:// o https:// perché lo mette da solo il client minio
      MINIO_STORAGE_ACCESS_KEY: minioadmin
      MINIO_STORAGE_SECRET_KEY: minioadmin
      MINIO_STORAGE_BUCKET_NAME: gachabucket
      GATCHA_DATABASE_URL: db-gatcha
    secrets:
      - gatcha_cert
      - gatcha_key

  # User Service
  user:
    build: ./user
    depends_on:
      - db-user
    environment:
      <<: *common-env
    secrets:
      - user_cert
      - user_key

  market:
    build: ./market
    depends_on:
      - db-market
    environment:
      <<: *common-env
    secrets:
      - market_cert
      - market_key

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes

  # MongoDB for gatcha (Database per il servizio Gatcha)
  db-gatcha:
    image: mongo:latest
    # ports:
    # - "27017:27017"  # è esposta solo per debugging, da commentare in produzione.
    volumes:
      - dbdata-gatcha:/data/db
      - ./mongo/seed-data:/docker-entrypoint-initdb.d # mongo, all'avvio, esegue automaticamente tutti i file .js che trova in quella cartella. serve per popolare con i dati iniziali. see: https://stackoverflow.com/questions/42912755/how-to-create-a-db-for-mongodb-container-on-start-up/42917632#42917632
    environment:
      MONGO_INITDB_DATABASE: gatcha_db  # Nome del database per Gatcha
    command: mongod --quiet --logpath /dev/null  # Avvia MongoDB con log minimizzati

  # MongoDB for user (Database per il servizio User)
  db-user:
    image: mongo:latest
    # ports:
    #   - "27018:27017"
    volumes:
      - dbdata-user:/data/db
    environment:
      MONGO_INITDB_DATABASE: user_db  # Nome del database per gli utenti
    command: mongod --quiet --logpath /var/log/mongodb/mongod.log  # Avvia MongoDB con log minimizzati

  db-market:
    image: mongo:latest
    ports:
      - "27019:27017"
    volumes:
      - dbdata-market:/data/db
    environment:
      MONGO_INITDB_DATABASE: market_db
    command: mongod --quiet --logpath /dev/null

  # a service to store files (images, etc.) in a bucket (like AWS S3)
  # documentation: https://github.com/minio/minio?tab=readme-ov-file#container-installation
  # if you open http://localhost:9001 from your browser, you can see the MinIO console
  minio-storage:
    image: quay.io/minio/minio   # The MinIO image
    container_name: minio-storage-container        # Optional: Name your container
    ports:
      - "9000:9000"              # MinIO API
      - "9001:9001"              # MinIO Console
    environment:
      MINIO_ROOT_USER: minioadmin # Access Key (Admin User)
      MINIO_ROOT_PASSWORD: minioadmin # Secret Key (Admin Password)
    command: server /data --console-address ":9001"  # Command to start the MinIO server
    volumes:
      - minio-volume:/data             # Persist data on the host machine

volumes:
  dbdata-gatcha:
  dbdata-user:  # Volume per db-user
  dbdata-auth: # Volume per db-auth
  dbdata-market:
  minio-volume:  # Volume per i bucker MinIO
  redis-data:

secrets:

  gateway_cert:
    file: ./gateway/localhost_cert.pem
  gateway_key:
    file: ./gateway/localhost_key.pem

  admin_gateway_cert:
    file: ./admin-gateway/localhost_cert.pem
  admin_gateway_key:
    file: ./admin-gateway/localhost_key.pem

  JWT_SECRET: 
    file: ./auth/jwt_secret.txt
  auth_cert:
    file: ./auth/localhost_cert.pem
  auth_key:
    file: ./auth/localhost_key.pem

  gatcha_cert:
    file: ./gatcha/localhost_cert.pem
  gatcha_key:
    file: ./gatcha/localhost_key.pem

  user_cert:
    file: ./user/localhost_cert.pem
  user_key:
    file: ./user/localhost_key.pem

  market_cert:
    file: ./market/localhost_cert.pem
  market_key:
    file: ./market/localhost_key.pem
    
# TODO: mettere su docker network separate tipo come avevo fatto nel disegno, però potrebbe volerci il bridge invece che dover mettere il gateway su due network allo stesso tempo